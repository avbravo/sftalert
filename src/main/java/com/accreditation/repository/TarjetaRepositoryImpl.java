package com.accreditation.repository;
// <editor-fold defaultstate="collapsed" desc="imports">

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.config.Config;
import org.eclipse.microprofile.config.inject.ConfigProperty;
/**
 * MongoDB
 */
import com.jmoordb.core.processor.model.JmoordbException;
import com.mongodb.client.MongoDatabase;
import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Filters.and;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import org.bson.Document;
import com.mongodb.client.model.FindOneAndUpdateOptions;
import com.mongodb.client.model.ReturnDocument;
import com.mongodb.client.result.InsertOneResult;
import org.bson.BsonInt64;
import org.bson.conversions.Bson;
import org.bson.BsonDocument;
import com.mongodb.client.model.Filters;
import com.mongodb.client.result.UpdateResult;
import com.mongodb.client.model.UpdateOptions;
/**
 * Java
 */
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.Optional;
import java.util.function.Supplier;
import com.jmoordb.core.util.MessagesUtil;
import com.jmoordb.core.model.Pagination;
import com.jmoordb.core.model.Sorted;
import com.jmoordb.core.util.JmoordbCoreDateUtil;
import java.util.HashSet;
import com.accreditation.model.Tarjeta;

// </editor-fold>
@ApplicationScoped
public class TarjetaRepositoryImpl implements TarjetaRepository {
// <editor-fold defaultstate="collapsed" desc="inject">

    @Inject
    MongoClient mongoClient;
    /**
     * Microprofile Config
     */
    @Inject
    Config config;
    @Inject
    @ConfigProperty(name = "mongodb.database1")
    String mongodbDatabase;

    String mongodbCollection = "tarjeta";
    /**
     * AutogeneratedRepository
     */
    @Inject
    com.accreditation.repository.AutogeneratedRepository autogeneratedRepository;
    /**
     * Supplier
     */
    @Inject
    com.accreditation.model.TarjetaSupplier tarjetaSupplier;
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Exception">

    private JmoordbException exception;

    public JmoordbException getJmoordbException() {
        if (exception == null || exception.getLocalizedMessage() == null) {
            exception = new JmoordbException("");
        }
        return exception;
    }

    public void setJmoordbException(JmoordbException exception) {
        this.exception = exception;
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.accreditation.model.Tarjeta> lookup(com.jmoordb.core.model.Search search ) ">

    @Override
    public java.util.List<com.accreditation.model.Tarjeta> lookup(com.jmoordb.core.model.Search search) {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            Document sortQuery = new Document();
            if (search.getSorted().getSort() == null || search.getSorted().getSort().isEmpty()) {
            } else {
                sortQuery = search.getSorted().getSort();
            }
            if (search.getPagination() == null || search.getPagination().getPage() < 1) {
                cursor = collection.find(search.getFilter()).allowDiskUse(Boolean.TRUE).sort(sortQuery).iterator();
            } else {
                cursor = collection.find(search.getFilter()).allowDiskUse(Boolean.TRUE)
                        .skip(search.getPagination().skip())
                        .limit(search.getPagination().limit())
                        .sort(sortQuery).iterator();
            }
            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.lang.Long count(com.jmoordb.core.model.Search[] search ) ">

    @Override
    public java.lang.Long count(com.jmoordb.core.model.Search[] search) {
        Long contador = 0L;
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            Document whereCondition = new Document();
            if (search.length != 0) {
                whereCondition = search[0].getFilter();
            }
            if (whereCondition.isEmpty()) {
                contador = collection.countDocuments();
            } else {
                contador = collection.countDocuments(whereCondition);
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return contador;
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.lang.Long countLikeByTarjeta(java.lang.String tarjeta ) ">

    @Override
    public java.lang.Long countLikeByTarjeta(java.lang.String tarjeta) {
        Long contador = 0L;
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            contador = collection.countDocuments(new Document("tarjeta", new Document("$regex", tarjeta).append("$options", "i")));

        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return contador;
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.lang.Long countLikeByDescripcion(java.lang.String descripcion ) ">

    @Override
    public java.lang.Long countLikeByDescripcion(java.lang.String descripcion) {
        Long contador = 0L;
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            contador = collection.countDocuments(new Document("descripcion", new Document("$regex", descripcion).append("$options", "i")));

        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return contador;
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.lang.Long searchCountLikeByTarjeta(java.lang.String tarjeta,com.jmoordb.core.model.Search search ) ">

    @Override
    public java.lang.Long searchCountLikeByTarjeta(java.lang.String tarjeta, com.jmoordb.core.model.Search search) {
        Long contador = 0L;
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            Document docX = new Document("tarjeta", new Document("$regex", tarjeta).append("$options", "i"));
            Bson filter0 = and(search.getFilter(), docX);
            contador = collection.countDocuments(filter0);

        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return contador;
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.lang.Long searchCountLikeByDescripcion(java.lang.String descripcion,com.jmoordb.core.model.Search search ) ">

    @Override
    public java.lang.Long searchCountLikeByDescripcion(java.lang.String descripcion, com.jmoordb.core.model.Search search) {
        Long contador = 0L;
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            Document docX = new Document("descripcion", new Document("$regex", descripcion).append("$options", "i"));
            Bson filter0 = and(search.getFilter(), docX);
            contador = collection.countDocuments(filter0);

        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return contador;
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.accreditation.model.Tarjeta> likeByTarjeta(java.lang.String tarjeta ) ">

    @Override
    public java.util.List<com.accreditation.model.Tarjeta> likeByTarjeta(java.lang.String tarjeta) {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            Document sort = new Document("tarjeta", 1);
            Document filter = new Document("tarjeta", new Document("$regex", tarjeta).append("$options", "i"));

            cursor = collection.find(filter).allowDiskUse(Boolean.TRUE)
                    .sort(sort)
                    .iterator();

            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.accreditation.model.Tarjeta> likeByTarjetaPagination(java.lang.String tarjeta,com.jmoordb.core.model.Pagination pagination ) ">

    @Override
    public java.util.List<com.accreditation.model.Tarjeta> likeByTarjetaPagination(java.lang.String tarjeta, com.jmoordb.core.model.Pagination pagination) {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            Document sort = new Document("tarjeta", 1);
            Document filter = new Document("tarjeta", new Document("$regex", tarjeta).append("$options", "i"));

            cursor = collection.find(filter).allowDiskUse(Boolean.TRUE)
                    .skip(pagination.skip())
                    .limit(pagination.limit())
                    .sort(sort)
                    .iterator();

            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.accreditation.model.Tarjeta> likeByDescripcion(java.lang.String descripcion ) ">

    @Override
    public java.util.List<com.accreditation.model.Tarjeta> likeByDescripcion(java.lang.String descripcion) {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            Document sort = new Document("descripcion", 1);
            Document filter = new Document("descripcion", new Document("$regex", descripcion).append("$options", "i"));

            cursor = collection.find(filter).allowDiskUse(Boolean.TRUE)
                    .sort(sort)
                    .iterator();

            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.accreditation.model.Tarjeta> searchLikeByTarjeta(java.lang.String tarjeta,com.jmoordb.core.model.Search search ) ">

    @Override
    public java.util.List<com.accreditation.model.Tarjeta> searchLikeByTarjeta(java.lang.String tarjeta, com.jmoordb.core.model.Search search) {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            Document sortQuery = new Document();
            if (search.getSorted().getSort() == null || search.getSorted().getSort().isEmpty()) {
                sortQuery = new Document("tarjeta", 1);
            } else {
                sortQuery = search.getSorted().getSort();
            }
            Document filter = new Document("tarjeta", new Document("$regex", tarjeta).append("$options", "i"));

            Bson filter0 = and(search.getFilter(), filter);
            if (search.getPagination() == null || search.getPagination().getPage() < 1) {
                cursor = collection.find(filter0).allowDiskUse(Boolean.TRUE).sort(sortQuery).iterator();
            } else {
                cursor = collection.find(filter0).allowDiskUse(Boolean.TRUE)
                        .skip(search.getPagination().skip())
                        .limit(search.getPagination().limit())
                        .sort(sortQuery).iterator();
            }

            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.accreditation.model.Tarjeta> searchLikeByDescripcion(java.lang.String descripcion,com.jmoordb.core.model.Search search ) ">

    @Override
    public java.util.List<com.accreditation.model.Tarjeta> searchLikeByDescripcion(java.lang.String descripcion, com.jmoordb.core.model.Search search) {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            Document sortQuery = new Document();
            if (search.getSorted().getSort() == null || search.getSorted().getSort().isEmpty()) {
                sortQuery = new Document("descripcion", 1);
            } else {
                sortQuery = search.getSorted().getSort();
            }
            Document filter = new Document("descripcion", new Document("$regex", descripcion).append("$options", "i"));

            Bson filter0 = and(search.getFilter(), filter);
            if (search.getPagination() == null || search.getPagination().getPage() < 1) {
                cursor = collection.find(filter0).allowDiskUse(Boolean.TRUE).sort(sortQuery).iterator();
            } else {
                cursor = collection.find(filter0).allowDiskUse(Boolean.TRUE)
                        .skip(search.getPagination().skip())
                        .limit(search.getPagination().limit())
                        .sort(sortQuery).iterator();
            }

            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.accreditation.model.Tarjeta> findByFechainicialGreaterThanEqualAndFechafinalLessThanEqual(java.util.Date start,java.util.Date end ) ">

    @Override
    public java.util.List<com.accreditation.model.Tarjeta> findByFechainicialGreaterThanEqualAndFechafinalLessThanEqual(java.util.Date start, java.util.Date end) {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            Bson filter = Filters.and(
                    Filters.gte("fechainicial", JmoordbCoreDateUtil.dateToLocalDateTimeFirstHourOfDay(start)),
                     Filters.lte("fechafinal", JmoordbCoreDateUtil.dateToLocalDateTimeLastHourOfDay(end))
            );

            cursor = collection.find(filter).allowDiskUse(Boolean.TRUE)
                    .iterator();

            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Optional<Tarjeta> save(Tarjeta tarjeta)">

    @Override
    public Optional<Tarjeta> save(Tarjeta tarjeta) {
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            Boolean success = Boolean.FALSE;
   //         while (!success) {
              //  tarjeta.setIdtarjeta(autogeneratedRepository.generate(mongodbDatabase, mongodbCollection));
                if (findByPkInternal(tarjeta.getIdtarjeta(), mongodbDatabaseValue, mongodbCollectionValue).isPresent()) {
                    MessagesUtil.warning("There is already a record with that id");
                    exception = new JmoordbException("There is already a record with that id");
                } else {
                    success = Boolean.TRUE;
                }
//            }
            InsertOneResult insertOneResult = collection.insertOne(tarjetaSupplier.toDocument(tarjeta));
            if (insertOneResult.getInsertedId() != null) {
                return Optional.of(tarjeta);
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return Optional.empty();
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Boolean update(Tarjeta tarjeta)">

    @Override
    public Boolean update(Tarjeta tarjeta) {
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            if (!findByPkInternal(tarjeta.getIdtarjeta(), mongodbDatabaseValue, mongodbCollectionValue).isPresent()) {
                MessagesUtil.warning("Not found a record with that id");
                exception = new JmoordbException("Not found a record with that id");
                return Boolean.FALSE;
            }
            Bson filter = Filters.empty();
            filter = Filters.eq("idtarjeta", tarjeta.getIdtarjeta());
            UpdateOptions options = new UpdateOptions().upsert(false);
            UpdateResult result = collection.updateOne(filter, tarjetaSupplier.toUpdate(tarjeta), options);
            if (result.getModifiedCount() > 0) {
                return Boolean.TRUE;
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return Boolean.FALSE;
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<Tarjeta> findAllPaginationSorted(Pagination pagination, Sorted sorted)">

    @Override
    public List<Tarjeta> findAllPaginationSorted(Pagination pagination, Sorted sorted) {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            cursor = collection.find().allowDiskUse(Boolean.TRUE)
                    .skip(pagination.skip())
                    .limit(pagination.limit())
                    .sort(sorted.getSort())
                    .iterator();

            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<Tarjeta> findAll()">

    @Override
    public List<Tarjeta> findAll() {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            cursor = collection.find().allowDiskUse(Boolean.TRUE)
                    .iterator();

            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<Tarjeta> findAllPagination(Pagination pagination)">

    @Override
    public List<Tarjeta> findAllPagination(Pagination pagination) {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            cursor = collection.find().allowDiskUse(Boolean.TRUE)
                    .skip(pagination.skip())
                    .limit(pagination.limit())
                    .iterator();

            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<Tarjeta> findAllSorted(Sorted sorted)">

    @Override
    public List<Tarjeta> findAllSorted(Sorted sorted) {
        List<Tarjeta> list = new ArrayList<>();
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            cursor = collection.find().allowDiskUse(Boolean.TRUE)
                    .sort(sorted.getSort())
                    .iterator();

            try {
                while (cursor.hasNext()) {
                    list.add(tarjetaSupplier.get(Tarjeta::new, cursor.next()));
                }
            } finally {
                cursor.close();
            }
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return list;

    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public Optional<Tarjeta> findByPk(Long id )">

    public Optional<Tarjeta> findByPk(Long id) {
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            Document doc = collection.find(eq("idtarjeta", id)).allowDiskUse(Boolean.TRUE).first();
            if (doc == null) {
                return Optional.empty();
            }
            Tarjeta tarjeta = tarjetaSupplier.get(Tarjeta::new, doc);
            return Optional.of(tarjeta);
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return Optional.empty();
    }
// </editor-fold>

// <editor-fold defaultstate="collapsed" desc="public Optional<Tarjeta> findByPkInternal(Long id, String mongodbDatabaseValue, String mongodbCollectionValue  )">
    public Optional<Tarjeta> findByPkInternal(Long id, String mongodbDatabaseValue, String mongodbCollectionValue) {
        try {
            if (mongodbDatabaseValue.equals("")) {
                mongodbDatabaseValue = mongodbDatabase;
            }
            if (mongodbCollectionValue.equals("")) {
                mongodbCollectionValue = mongodbCollection;
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            Document doc = collection.find(eq("idtarjeta", id)).allowDiskUse(Boolean.TRUE).first();
            if (doc == null) {
                return Optional.empty();
            }
            Tarjeta tarjeta = tarjetaSupplier.get(Tarjeta::new, doc);
            return Optional.of(tarjeta);
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return Optional.empty();
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Long deleteByPK(Long id )">

    @Override
    public Long deleteByPk(Long id) {
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            MongoCursor<Document> cursor;
            Bson filter = Filters.eq("idtarjeta", id);

            com.mongodb.client.result.DeleteResult deleteResult = collection.deleteOne(filter);

            return deleteResult.getDeletedCount();
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return 0L;
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Long deleteMany(com.jmoordb.core.model.Search search)">

    @Override
    public Long deleteMany(com.jmoordb.core.model.Search search) {
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            Document whereCondition = new Document();
            whereCondition = search.getFilter();
            com.mongodb.client.result.DeleteResult deleteResult = collection.deleteMany(whereCondition);

            return deleteResult.getDeletedCount();
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return 0L;
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Long updateMany(Bson query, Bson update)">

    @Override
    public Long updateMany(Bson query, Bson update) {
        try {
            String mongodbDatabaseValue = mongodbDatabase;
            String mongodbCollectionValue = mongodbCollection;
            if (!getDynamicDatabase().equals("")) {
                mongodbDatabaseValue = getDynamicDatabase();
            }
            if (!getDynamicCollection().equals("")) {
                mongodbCollectionValue = getDynamicCollection();
            }
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabaseValue);
            setDynamicDatabase("");
            MongoCollection<Document> collection = database.getCollection(mongodbCollectionValue);
            setDynamicCollection("");
            UpdateResult result = collection.updateMany(query, update);
            return result.getModifiedCount();
        } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
            exception = new JmoordbException(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
        }
        return 0L;
    }
// </editor-fold>

}
